"""Type definitions for Milvus operations."""
from typing import Protocol, TypeVar, List, Any, Dict, Generic, Optional, Type, Union
from pathlib import Path

T = TypeVar('T')
ModelClass = TypeVar('ModelClass', bound='MilvusModel')

class MilvusCollection(Protocol[T]):
    """Protocol for Milvus collection operations."""
    def load(self) -> None: ...
    def search(self, data: List[List[float]], anns_field: str, param: dict, limit: int, output_fields: List[str]) -> List[Any]: ...
    def insert(self, data: Union[List[T], List[Dict[str, Any]]]) -> None: ...
    def delete(self, expr: str) -> None: ...

class MilvusSession(Protocol):
    """Protocol for Milvus session operations."""
    def collection(self, name: str) -> MilvusCollection[Any]: ...
    def close(self) -> None: ...
    def collection_exists(self, model_class: Type[Any]) -> bool: ...
    def get_milvus_collection(self, model_class: Type[Any]) -> MilvusCollection[Any]: ...

class MilvusModel(Protocol):
    """Protocol for base model operations."""
    id: str
    embedding: Optional[List[float]]
    metadata: Dict[str, Any]
    
    @classmethod
    def collection_name(cls) -> str: ...
    def to_dict(self) -> Dict[str, Any]: ...

class EmbeddingGenerator(Protocol):
    """Protocol for embedding generation functions."""
    def __call__(self, text: str) -> List[float]: ... 